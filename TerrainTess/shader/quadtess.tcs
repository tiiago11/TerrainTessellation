#version 450

layout( vertices=4 ) out;

uniform mat4 ModelViewMatrix;
uniform vec3 camPos;

void main()
{
	float MinDepth = 1.0;
	float MaxDepth = 50.0;
	float MinTessLevel = 1.0;
	float MaxTessLevel = 16.0;

	//quad
	if (gl_InvocationID == 0){
		vec3 mid;
		float dist;
		float depth;

		vec3 p0 = vec3(gl_in[0].gl_Position);
		vec3 p1 = vec3(gl_in[1].gl_Position);
		vec3 p2 = vec3(gl_in[2].gl_Position);
		vec3 p3 = vec3(gl_in[3].gl_Position);

		mid   = (p0 + p1) * 0.5f;
		dist  = length(mid - camPos);
		depth = clamp((dist - MinDepth) / (MaxDepth - MinDepth), 0.0, 1.0);
		gl_TessLevelOuter[1] = mix(MaxTessLevel, MinTessLevel, depth);

		mid   = (p1 + p2) * 0.5f;
		dist  = length(mid - camPos);
		depth = clamp((dist - MinDepth) / (MaxDepth - MinDepth), 0.0, 1.0);
		gl_TessLevelOuter[2] = mix(MaxTessLevel, MinTessLevel, depth);

		mid   = (p2 + p3) * 0.5f;
		dist  = length(mid - camPos);
		depth = clamp((dist - MinDepth) / (MaxDepth - MinDepth), 0.0, 1.0);
		gl_TessLevelOuter[3] = mix(MaxTessLevel, MinTessLevel, depth);

		mid   = (p3 + p0) * 0.5f;
		dist  = length(mid - camPos);
		depth = clamp((dist - MinDepth) / (MaxDepth - MinDepth), 0.0, 1.0);
		gl_TessLevelOuter[0] = mix(MaxTessLevel, MinTessLevel, depth);

		// inner is the average of the outers
		gl_TessLevelInner[0] = (gl_TessLevelOuter[0] + gl_TessLevelOuter[1] + gl_TessLevelOuter[2] + gl_TessLevelOuter[3]) / 4.0f;
		gl_TessLevelInner[1] = (gl_TessLevelOuter[0] + gl_TessLevelOuter[1] + gl_TessLevelOuter[2] + gl_TessLevelOuter[3]) / 4.0f;
	}

	gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;
}
